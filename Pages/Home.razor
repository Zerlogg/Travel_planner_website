@page "/home"
@using TravelingTrips.Pages.TravelComponents
@using TravelingTrips.Pages.TravelComponents.Print
@inject IJSRuntime js
@inject DataContext Context
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <MudCarousel Class="mud-width-full mb-14 rounded" Style="height:260px;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="true" TData="object">
            <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                <MudContainer class="d-flex flex-column justify-center align-center pb-2" style="height:100%" Fixed="true">
                    <MudText Typo="Typo.h2"><b>Welcome @context.User.Identity?.Name to Traveling Trips!</b></MudText>
                    <MudText Typo="Typo.h4">Plan your next travel today</MudText>
                </MudContainer>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Slide" Color="@Color.Secondary" class="d-flex align-center">
                <MudImage Src="/Images/France.jpg" Style="width: 100%; height: 350px" Alt="France"/>
                <MudContainer class="d-flex flex-column justify-center align-center pb-2" style="height:100%; position: absolute" Fixed="true">
                    <MudText Typo="Typo.h3" Class="mb-2 outline-text"><b>Trip to Paris</b></MudText>
                    <MudText Typo="Typo.h4" Class="mb-3 outline-text">Save 20% on your next trip!</MudText>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.BookmarkAdded" Color="Color.Primary" Size="Size.Small" Href="/travelcreate" Class="py-3">Book now</MudButton>
                </MudContainer>
            </MudCarouselItem>
            <MudCarouselItem Transition="Transition.Slide" Color="Color.Dark" class="d-flex align-center">
                <MudImage Src="/Images/America.jpg" Style="width: 100%; height: 350px" Alt="America"/>
                <MudContainer class="d-flex flex-column justify-center align-center pb-2" style="height:100%; position: absolute" Fixed="true">
                    <MudText Typo="Typo.h3" Class="mb-2 outline-text"><b>Trip to Washington</b></MudText>
                    <MudText Typo="Typo.h4" Class="mb-3 outline-text">Save 15% on your next trip!</MudText>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.BookmarkAdded" Color="Color.Primary" Size="Size.Small" Href="/travelcreate" Class="py-3">Book now</MudButton>
                </MudContainer>
            </MudCarouselItem>
        </MudCarousel>

        <MudContainer Class="mb-14 pa-0">
            <MudContainer Class="d-flex mb-6 pa-0">
                <MudText Typo="Typo.h5" Class="pr-4">Your recently created trips</MudText>
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Href="/travelcreate">Create</MudButton>
            </MudContainer>

            <MudContainer class="d-inline-flex gap-3 justify-left px-0 flex-wrap" Fixed="true">
                @if (_travels.Any())
                {
                    @foreach (var travel in _travels.Take(4))
                    {
                        <MudCard Style="width: 310px;">
                            <MudCardMedia Image="/Images/France.jpg" Height="160"/>
                            <MudCardContent Class="pb-0">
                                <MudText Typo="Typo.h6">Trip to @travel.City</MudText>
                                <MudText Typo="Typo.body2" Class="pt-1">@travel.Description</MudText>
                                <MudText Typo="Typo.body2" Class="pt-2">@($"{travel.StartDate:dd.MM.yyyy} - {travel.EndDate:dd.MM.yyyy}")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Default" @onclick="@(p=>DownloadFile("YourTrip.pdf"))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" @onclick="() => DeleteTravel(travel.Id)"/>
                                <MudSpacer/>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" @onclick="() => EditTravel(travel.Id)"/>
                            </MudCardActions>
                        </MudCard>
                    }
                }
                else
                {
                    <MudContainer class="d-flex flex-column justify-center align-center" Fixed="true">
                        <MudText Typo="Typo.h5">You haven't created any trips yet</MudText>
                    </MudContainer>
                }
            </MudContainer>
        </MudContainer>

        <MudContainer Class="mb-6 pa-0">
            <MudContainer Class="d-flex pb-4 pa-0 align-center">
                <MudText Typo="Typo.h5" Class="pr-4">Where you want to go next?</MudText>
                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Explore" Color="Color.Primary" Href="/map">Explore</MudButton>
            </MudContainer>
            <MudContainer id="map" style="height: 500px; width: 100%;" Class="rounded"/>
        </MudContainer>
    
    </Authorized>
</AuthorizeView>


@code {
    private async Task InitializeMapAsync()
    {
        await js.InvokeVoidAsync("initializeMap");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeMapAsync();
        }
    }
    
    private string? TextValue { get; set; }

    private List<Travel> _travels = new List<Travel>();
    
    async Task<string> getUserId(){
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }
    
    protected override async Task OnInitializedAsync()
    {
        var userId = await getUserId();
        _travels = await Context.Travels.Where(x => x.UserId == userId).ToListAsync();
    }
    
    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    
    private void DownloadFile(string filename)
    {
        var pdf = new PDFGenerator();
        pdf.DownloadPDF(js, filename);
    }
    
    private void EditTravel(int id)
    {
        var parameters = new DialogParameters { { "Id", id } };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<TravelDialog>("Edit trip", parameters, options);
    }
    
    private async Task DeleteTravel(int id)
    {
        var dbTravel = await Context.Travels.FindAsync(id);
        if (dbTravel != null)
        {
            Context.Remove(dbTravel);
            await Context.SaveChangesAsync();
            Snackbar.Add("Trip was successfully deleted");
        }
        ReloadPage();
    }
}