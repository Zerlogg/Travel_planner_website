@inject DataContext Context
@inject ISnackbar Snackbar
@inject IJSRuntime js

<div class="d-flex justify-center align-center">
    <MudImage Src="@CurrentTrip.Image" Alt="City Image" Style="width: 100%; height: 400px" />
    <MudPaper class="d-flex flex-column align-center pa-6 rounded-0" Style="width: 100%; position: absolute" Elevation="0">
        <MudText Typo="Typo.h4"><b>Trip to @CurrentTrip.City</b></MudText>
        <MudText Typo="Typo.h6" Class="pt-2 text-wrap">@CurrentTrip.Description</MudText>
        <MudText Typo="Typo.h6" Class="pt-2">@($"{CurrentTrip.StartDate:dd.MM.yyyy} - {CurrentTrip.EndDate:dd.MM.yyyy}")</MudText>
    </MudPaper>
</div>
<div class="d-flex pa-6 mt-1">
    <div class="d-flex flex-column pr-6" style="width: 65%">
        <MudContainer Class="px-0 d-flex align-center pb-2">
            <MudText Typo="Typo.h5"><b>Personal preferences</b></MudText>
            <MudButton OnClick="SavePreferences" Color="Color.Success" Class="ml-auto">Save</MudButton>
            <MudButton OnClick="ClearPreferences" Color="Color.Error" Class="ml-1">Clear</MudButton>
        </MudContainer>
        <MudTextField T="string" Variant="Variant.Outlined" Lines="6" MaxLength="600" @bind-Value="@CurrentTrip.Preferences"/>
    </div>
    <div class="px-0 d-inline-flex" style="width: 35%">
        <MudPaper Style="width: 100%" Class="pa-3">
            <MudContainer Class="px-0 d-flex justify-space-between align-center pb-2">
                <MudText Typo="Typo.h5"><b>Budget</b></MudText>
                <MudButton OnClick="SaveBudget" Color="Color.Success" Class="ml-auto">Save</MudButton>
                <MudButton OnClick="ClearBudget" Color="Color.Error" Class="ml-1">Clear</MudButton>
            </MudContainer>
            <MudNumericField @bind-Value="@CurrentTrip.Budget" MaxLength="12" Variant="Variant.Outlined" Format="F2"/>
            <MudContainer Class="px-0 mt-3 d-flex justify-space-between align-center">
                <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" OnClick="@(() => IncreaseBudget(100.00m))">+100.00</MudButton>
                <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" OnClick="@(() => IncreaseBudget(10.00m))">+10.00</MudButton>
                <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" OnClick="@(() => IncreaseBudget(1.00m))">+1.00</MudButton>
            </MudContainer>
        </MudPaper>
    </div>
</div>

@code {
    [Parameter]
    public Travel CurrentTrip { get; set; }

    private async Task SaveBudget()
    {
        var trip = await Context.Travels.FindAsync(CurrentTrip.Id);
        if (trip != null)
        {
            trip.Budget = CurrentTrip.Budget;
            await Context.SaveChangesAsync();
            Snackbar.Add("Budget saved successfully");
        }
        else
        {
            Snackbar.Add("Failed to save budget", Severity.Error);
        }
    }

    private async Task ClearBudget()
    {
        CurrentTrip.Budget = 0.0;
        await SaveBudget();
    }

    private async Task SavePreferences()
    {
        var trip = await Context.Travels.FindAsync(CurrentTrip.Id);
        if (trip != null)
        {
            trip.Preferences = CurrentTrip.Preferences;
            await Context.SaveChangesAsync();
            Snackbar.Add("Preferences saved successfully");
        }
        else
        {
            Snackbar.Add("Failed to save preferences", Severity.Error);
        }
    }

    private async Task ClearPreferences()
    {
        CurrentTrip.Preferences = string.Empty;
        await SavePreferences();
    }

    private void IncreaseBudget(decimal amount)
    {
        CurrentTrip.Budget += (double?)amount;
    }
}