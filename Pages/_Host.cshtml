@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TravelingTrips.Services
@namespace TravelingTrips.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="icon" type="image/png" href="favicon.ico"/>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <link href="css/styles.css" rel="stylesheet" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo" crossorigin=""></script>
    <script src="js/L.timezones.js"></script>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="~/js/PDFGenerate.js"></script>
    <script src="~/js/googleImageSearch.js"></script>
    <script async src="https://cse.google.com/cse.js?cx=b3c6c1426b5dd4fb3"></script>
    <script>
        async function initializeMap() {
            const list = [];
            var map = L.map('map').setView([56.941978, 24.120483], 4);
            
            var pinsResponse = await fetch('/api/pins');
            var pins = await pinsResponse.json();
            
            pins.forEach(pin => {
                var marker = L.marker([pin.latitude, pin.longitude]).addTo(map);
                marker.on('click', async function() {
                    var deleteResponse = await fetch(`/api/pins?latitude=${pin.latitude}&longitude=${pin.longitude}`, {
                        method: 'DELETE'
                    });
                    map.removeLayer(marker);
                });
            });

            var customBounds = L.latLngBounds(
                L.latLng(-140, -160),
                L.latLng(140, 160) 
            );
            
            map.setMaxBounds(customBounds);
            map.on('drag', function() {
                map.panInsideBounds(customBounds, { animate: false });
            });
           
            var Basemap = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
              maxZoom: 16,
              minZoom: 3
            }).addTo(map);
            
            list.forEach(element => {
                element.map(x => x.longitude);
                console.log(element);
            });
            
            map.on("click", function(e){
                var latitude = e.latlng.lat;
                var longitude = e.latlng.lng;
                
                savePinToDatabase(latitude, longitude);
                
                var marker = new L.marker([latitude, longitude]).addTo(map).on('click', e=> e.target.remove());
            })
            
            var timezones = L.timezones.bindPopup(function (layer) {
                return layer.feature.properties.time_zone;
            }).addTo(map);
            
            var baseMaps = {
                'Base map' : Basemap
            }
            
            var overlayMaps = {
                'Time zones' : timezones
            }
            
            L.control.layers(baseMaps, overlayMaps).addTo(map);
        }
        
        function savePinToDatabase(latitude, longitude) {
            fetch('/api/pins', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ latitude: latitude, longitude: longitude }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to save pin to the database. Server responded with status: ' + response.status);
                }
            })
            .catch(error => {
                console.error('Error while saving pin to the database:', error);
            });
        }
    </script>
</body>
</html>